/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package corregido;

import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import javax.swing.UIManager;


/**
 *
 * @author owner
 */
public class Inter1 extends javax.swing.JFrame {
    private CPuzzle Inicio;
    private Resultados resultados;
    private int raiz[][];
    private Vector Agenda;// Almacena la agenda actual;
    private Vector Hijos = new Vector();
    private Vector Historial;
    private Vector Casos = new Vector();
    private Vector ResultadosVector = new Vector();
    
    private int agendaMax=1;
    private int nodosgenerados = 0;
    private int w = 2;
    private int nivelSolicitado = 155;
    
  
    /**
     * Creates new form Inter1
     */
    public Inter1() {
        initComponents();
          
        /**
         * Inicializa los controles números
         */
        /*Fija el rango de 0 a 8 y pone el valor en los controles*/
        /*Valor, Minimo, Maximo, Paso*/
        jSpinner1.setModel(new SpinnerNumberModel(2, 0, 8, 1));
        //jSpinner1.setSize(20, 20);
        jSpinner2.setModel(new SpinnerNumberModel(8, 0, 8, 1));
        jSpinner3.setModel(new SpinnerNumberModel(3, 0, 8, 1));
        jSpinner4.setModel(new SpinnerNumberModel(1, 0, 8, 1));
        jSpinner5.setModel(new SpinnerNumberModel(6, 0, 8, 1));
        jSpinner6.setModel(new SpinnerNumberModel(4, 0, 8, 1));
        jSpinner7.setModel(new SpinnerNumberModel(7, 0, 8, 1));
        jSpinner8.setModel(new SpinnerNumberModel(0, 0, 8, 1));
        jSpinner9.setModel(new SpinnerNumberModel(5, 0, 8, 1));
        /*Pone el rango de 1 a 4 en w*/
        jSpinner10.setModel(new SpinnerNumberModel(1, 1, 4, 1));
        /*porn el rango de 1 a 10 000 pñara la profundidad*/
        jSpinner11.setModel(new SpinnerNumberModel(1, 1, 10000, 1));
        
        //jPanel1.setLayout(new GridLayout(3,3));
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jSpinner1 = new javax.swing.JSpinner();
        jSpinner2 = new javax.swing.JSpinner();
        jSpinner7 = new javax.swing.JSpinner();
        jSpinner4 = new javax.swing.JSpinner();
        jSpinner5 = new javax.swing.JSpinner();
        jSpinner6 = new javax.swing.JSpinner();
        jSpinner9 = new javax.swing.JSpinner();
        jSpinner8 = new javax.swing.JSpinner();
        jSpinner3 = new javax.swing.JSpinner();
        jSpinner10 = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        nivelesExplorados = new javax.swing.JTextField();
        agendaMaxima = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        nivelSolucion = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        nodosGeneradosText = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        tiempoText = new javax.swing.JTextField();
        jSpinner11 = new javax.swing.JSpinner();
        jButton2 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Resolver");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSpinner7, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSpinner4, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSpinner5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSpinner8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSpinner6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinner9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinner3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner5, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinner4, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinner6, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner7, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinner9, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinner8, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel3.setText("W");

        jLabel2.setText("Niveles Explorados");

        jLabel1.setText("Agenda Máxima");

        nivelesExplorados.setEnabled(false);

        agendaMaxima.setEnabled(false);

        jLabel4.setText("Nivel de la Solución");

        nivelSolucion.setEnabled(false);

        jLabel5.setText("Nodos Generados");

        nodosGeneradosText.setEnabled(false);
        nodosGeneradosText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodosGeneradosTextActionPerformed(evt);
            }
        });

        jLabel6.setText("Tiempo (mm:ss:MM)");

        jLabel7.setText("Profundidad");

        tiempoText.setEnabled(false);

        jButton2.setText("Abrir Archivo");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Acomodados", "Manhattan", "Propia" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tiempoText)
                            .addComponent(nodosGeneradosText)
                            .addComponent(nivelSolucion)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(26, 26, 26)))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nivelesExplorados)
                            .addComponent(agendaMaxima)))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(52, 52, 52)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jSpinner10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSpinner11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel3))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jSpinner10)
                        .addComponent(jButton2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jSpinner11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(agendaMaxima, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nivelesExplorados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nivelSolucion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(nodosGeneradosText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(tiempoText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Se obtiene el tiempo inicial de ejecusión
        long inicioTime = 0;
        int nivel = 0;
        int ultimo = 0;
        boolean exito = false;
        
        
        int TotalCasos = Casos.size();
        
        for (int caso=0;caso<TotalCasos;caso++){
            inicioTime = System.currentTimeMillis();
            nivel = 0;
            ultimo = 0;

            raiz = new int[3][3];
            
            w = (Integer.parseInt(jSpinner10.getValue().toString()));

            nivelSolicitado = (Integer.parseInt(jSpinner11.getValue().toString()));

            Historial = new Vector();
            Agenda = new Vector();
            PasarDatosFormaARaiz(2, caso);
            /*Agrega el nodo inicoa al historial de nodos*/

            /**
            * Aqui se desarrolla el algoritmo,
            */
            if (ValidarRaiz()) {
                nivel = 0;


                Inicio = new CPuzzle(raiz, nivel);
                nodosgenerados = 1;

                Historial.add(Inicio);
                Agenda.add(Inicio);
                // Iterará Hasta que la
                // heuristica sea cero, es decir, hasta que encuntre la solución
                // o alcance el nivel máximo
                // Recorrer toda la agenda para ver si está la solución
                try{
                            while (((CPuzzle) Agenda.get(0)).Heuristica() != 0 && ((CPuzzle) Agenda.get(0)).getNivel() <= nivelSolicitado)//3
                            {
                                CrearHijos((CPuzzle) Agenda.get(0));
                                //Crea Nodos Hijos en el Vector Hijos del primer elemento
                                AgregarMejoresHijos();

                                ultimo = Agenda.size();
                                //Obtiene el nivel del ultimo hijo creado

                                nivel = ((CPuzzle) Agenda.get(ultimo-1)).getNivel();

                                if (Agenda.size() > agendaMax) {
                                    agendaMax = Agenda.size(); //Guarda el val maximo de Agenda
                                }

                                Agenda.remove(0);
                                //System.out.println("nivel: " + nivel);
                            }// end while


                            // Como no encontro la solución en el limite de niveles, entoinces buscara en todos los nodos generados
                            //  int contadorBT = 0;
                            int limiteBT = Agenda.size();
                            
                           

                            for (int bt=0;bt<limiteBT-1;bt++){
                                if (((CPuzzle) Agenda.get(0)).Heuristica() == 0){

                                   // JOptionPane.showMessageDialog(null, "Sí encontró la solución en Backtrack:)"); 
                                    break;

                                }
                                Agenda.removeElementAt(0);
                            }


                            if (!Agenda.isEmpty() && ((CPuzzle) Agenda.get(0)).Heuristica() == 0) {
                               // JOptionPane.showMessageDialog(null, "Sí encontró la solución :)"); 
                                nivelSolucion.setText(Integer.toString(((CPuzzle) Agenda.get(0)).getNivel()));
                                exito = true;
                            } else {
                                //Recorrer toda la agenda para ver si está la solución
                                //JOptionPane.showMessageDialog(null, "No encontró la solución :(");
                                exito = false;
                            }
                            // Se obtiene el tiempo final de ejecusión
                            long finTime = System.currentTimeMillis();


                        /* Despliega toda la infprmación de salida*/
                            SimpleDateFormat format = new SimpleDateFormat("mm:ss:SSS");                         
                            Date date = new Date(finTime - inicioTime);                        
                            tiempoText.setText(format.format(date));

                            agendaMaxima.setText(Integer.toString(agendaMax-1));
                            nivelesExplorados.setText(Integer.toString(nivel));
                            nodosGeneradosText.setText(Integer.toString(nodosgenerados));
                            
                            
                            /*Guarda datos en la Clase Resultados*/
                            resultados = new Resultados();
                          
                            resultados.setCaso(caso);
                            resultados.setExito(exito);
                            resultados.setNivel(nivel);
                            resultados.setNivelGrupo(0); // no se que ponerle
                            resultados.setNodos(nodosgenerados);
                            resultados.setTiempo(finTime);
                            
                            ResultadosVector.add(resultados);
                            
                            //JOptionPane.showMessageDialog(null, "Caso: " + caso + "Terminado");
                            

                }
                catch(Exception e){
                    e.printStackTrace();
                }

            } else {
                JOptionPane.showMessageDialog(null, "Los valores no deben ser repetidos.: " + caso);
            }
        }
        JOptionPane.showMessageDialog(null, "Todo bien.");
        /**
         * Esvrrbir arcivo
         */
        
        this.EscribirArchivo();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void nodosGeneradosTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nodosGeneradosTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nodosGeneradosTextActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
               
        if (LeerCasos(DialogoAbrir()) ){
            JOptionPane.showMessageDialog(null, "Casos leídos con éxito.");
        }
        else{
            JOptionPane.showMessageDialog(null, "Ocurrió un error al leer el archivo. Sentimos las molestias.");
        }
        
        jButton2.setEnabled(false);
        
    }//GEN-LAST:event_jButton2ActionPerformed
    private String  DialogoAbrir() {
        String nombreArchivo = "";
        JFileChooser fileChooser=new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setDialogTitle("Abrir archivo");

        int result=fileChooser.showOpenDialog(null);
        if(result==JFileChooser.CANCEL_OPTION){
           return null;
        }
        else { 
            try {
                nombreArchivo=fileChooser.getSelectedFile().toString();
                
            }
            catch (Exception ex) {
            }
        }
        return nombreArchivo;
    }
    
    private void EscribirArchivo() {
      
	try { 
	    PrintWriter escribir = new PrintWriter(
                             new BufferedWriter(new FileWriter("Resultados.txt")));
	    int lineaNo = 1;
            int TotalResutados = ResultadosVector.size();
            
	    for (int i=0;i<TotalResutados;i++) {
                Resultados resultados = (Resultados)ResultadosVector.get(i);                
                
                String caso = Integer.toString(resultados.getCaso());
                String nivel = Integer.toString(resultados.getNivel());
                String nodos = Integer.toString(resultados.getNodos());
                String tiempo = Long.toString(resultados.getTiempo());
                String nivelGrupo = Integer.toString(resultados.getNivelGrupo());
                String exito = "";
                if (resultados.isExito()){
                    exito = "1";
                }
                else{
                    exito = "0";
                }
                            
                            
		escribir.println(caso+","+nivel+","+nodos+","+nivelGrupo+","+exito);
            }
            
	    escribir.close();
	} catch (EOFException e) { 
	    //System.out.println("Final de Stream");
	}
        
        
            catch(IOException e) {
                e.printStackTrace();
            }
    }
    
    private boolean LeerCasos(String a) {
        StringTokenizer token;
        String linea="";
        String dato;
        int cont=0;
        Vector ElementosArchivo = new Vector();
     
        try {
            DataInputStream entrada=new DataInputStream(new FileInputStream(a));
           
            linea=entrada.readLine();
            //JOptionPane.showMessageDialog(null, "linea: " + linea);
            while(linea!=null) {
                token=new StringTokenizer(linea);
                while(token.hasMoreTokens()) {
                    dato=token.nextToken();	
                    cont++;
                    try {
                         ElementosArchivo.addElement(dato);
                    }
                    catch(NumberFormatException e) {
                    }

                }
                /*Añade un linea CONVERTIDA EN MATRIZ al vector Casos*/
                Casos.add(ComponerGuardarCasos(ElementosArchivo));
               
                
                ElementosArchivo.removeAllElements();
                linea=entrada.readLine();
            }
            entrada.close();            
            
            }
            catch(IOException e) {
                e.printStackTrace();
                return false;
            }
                
            return true;
    }
    /**
     * Compone la linea en una matriz
     * @param ElementosArchivo
     * @return Temp
     */
    private Matriz ComponerGuardarCasos(Vector ElementosArchivo) {
        int k=0;
        int [][] Temp = new int[3][3];
        
        for (int i=0;i<3;i++){
            for (int j=0;j<3;j++){
                Temp[i][j] = (Integer.parseInt(ElementosArchivo.get(k).toString()));
                k++;
            } 
        }
        
        return new Matriz(Temp);
    }
    
    /**
 * Esta función Selecciona los mejores w Estados que pueden dar con la solución
 * dependiendo del valor de w, es decir de cuantos "hijos" va a usar.
 */
    private void AgregarMejoresHijos() {
      int  pos = 0, i, mayor;      
      //Analizar cuantos hijos w tenemos que incluir}
      while (Hijos.size()>w)
      {
        mayor = -1;
        for (i=0; i< Hijos.size(); i++){
            if  ( ((CPuzzle)Hijos.get(i)).Heuristica() > mayor)
            {
                mayor = ((CPuzzle)Hijos.get(i)).Heuristica();
                pos = i;
            }
        }        //System.out.println("i: " + i);
        Hijos.remove(pos); //Quitar el mayor de ellos
      }
       for (i=0; i< Hijos.size(); i++){
           nodosgenerados++;
           Agenda.add(Hijos.get(i));
       }
      
 } 
              
      
      
      /**
       * Esta función, Crea, a partir de un estado actual, todos los posibles estados siguientes
       * @param Nodo 
       */
 
    private void CrearHijos(CPuzzle Nodo){
                         
         int n; //Nivel 
         int x ;
         int y ;      
         int hijo[][];
         CPuzzle temporal;
         
         x= (int) Nodo.Cero().getX();
         y= (int) Nodo.Cero().getY();
         n = Nodo.getNivel()+1; //Incrementa el valor del nivel del padre en 1               
         Hijos.removeAllElements();
        
         // Si se puede mover hacia abajo        
         if (x>0){
             hijo = new int[3][3];
             hijo = copiarCasilla(Nodo);                         
             hijo[x][y] = hijo[x-1][y];
             hijo[x-1][y] = 0;          
             temporal = new CPuzzle(hijo,n);
             if (!YaEstaElNodo(temporal)){
                Hijos.add(temporal);
                Historial.add(temporal);
             }//End if             
          }//End if
         // Si se puede mover hacia arriba
         if (x<2){             
             hijo = new int[3][3];
             hijo = copiarCasilla(Nodo);                         
             hijo[x][y] = hijo[x+1][y];
             hijo[x+1][y] = 0;          
             temporal = new CPuzzle(hijo,n);
             if (!YaEstaElNodo(temporal)){
                Hijos.add(temporal);
                Historial.add(temporal);
             }//End if                          
          }//End if
         // Si se puede mover hacia la izquierda
          if (y>0){
             hijo = new int[3][3];
             hijo = copiarCasilla(Nodo);                         
             hijo[x][y] = hijo[x][y-1];
             hijo[x][y-1] = 0;          
             temporal = new CPuzzle(hijo,n);
             if (!YaEstaElNodo(temporal)){
                Hijos.add(temporal);
                Historial.add(temporal);
             }//End if                                                  
          }//end if
          
          // Si se puede mover hacia la derecha
          if (y<2){
             hijo = new int[3][3];
             hijo = copiarCasilla(Nodo);                         
             hijo[x][y] = hijo[x][y+1];
             hijo[x][y+1] = 0;          
             temporal = new CPuzzle(hijo,n);
             if (!YaEstaElNodo(temporal)){
                Hijos.add(temporal);
                Historial.add(temporal);
             }//End if             
          }//end if
        
                
    }
    public int [][] copiarCasilla(CPuzzle origen) {
        // Copia las casillas de un Puzzle a un arreglo
        //y lo devuelve
        int destino[][] = new int [3][3];
        
        for (int i=0;i<3;i++){
            for (int j=0;j<3;j++){
                destino[i][j] = origen.getCasilla()[i][j];
            }
        
        }       
        return destino;
    }
    

    // Obtiene los datos de la Forma - Interfaz a la variable Raiz
    private void PasarDatosFormaARaiz(int tipo, int caso){
        if (tipo == 1){
            raiz[0][0]= (Integer.parseInt(jSpinner1.getValue().toString()));
            raiz[0][1]= (Integer.parseInt(jSpinner2.getValue().toString()));
            raiz[0][2]= (Integer.parseInt(jSpinner3.getValue().toString()));
            raiz[1][0]= (Integer.parseInt(jSpinner4.getValue().toString()));
            raiz[1][1]= (Integer.parseInt(jSpinner5.getValue().toString()));
            raiz[1][2]= (Integer.parseInt(jSpinner6.getValue().toString()));
            raiz[2][0]= (Integer.parseInt(jSpinner7.getValue().toString()));
            raiz[2][1]= (Integer.parseInt(jSpinner8.getValue().toString()));
            raiz[2][2]= (Integer.parseInt(jSpinner9.getValue().toString()));
           
            
        }
        else{
           for (int i=0;i<3;i++){
                for (int j=0;j<3;j++){                            
                    raiz[i][j] = ((Matriz)Casos.get(caso)).getMatriz()[i][j];
                     //System.out.print(((Matriz)Casos.get(caso)).getMatriz()[i][j]+ " ");
                }
        
            }   
        }
    }
    
    //Revisa que el los datos obtenidos de la Forma Interfaz
    //tenga duplicidad de números
    // regresa Falso si encuentra
    // regresa Verdadero sí no encuentra duplicas
    private boolean ValidarRaiz(){
        int i, j,x,y;

      
        
        for (i=0; i< 3; i++)
        {
        for (j=0;j<3; j++)
        {
            for (x=0; x<3; x++)
            {
                for (y=0; y<3; y++)
                {
                    if ((x!=i)||(y!=j))
                    {
                        if (raiz[x][y]== raiz[i][j])
                        {
                            return false; //Si encuentra repetido regresa Falso
                        }
                    }            
                }
            }

            }
            }
        return true; //Si no hubo duplicidad regresa verdadero
        }
    private boolean YaEstaElNodo(CPuzzle Nodo)
{
    int i;
    int j;
    j=Historial.size();    
    for (i=0;i<j;i++){
        if (EsIgual((CPuzzle)Historial.get(i), Nodo))
            return true;
    }
    return false;        
}
private boolean EsIgual(CPuzzle A, CPuzzle B){
    int i;
    int j;
    boolean b = true;//famos por hecho de ese nodo es igula a los demas
    for (i=0;i<3;i++){
        for (j=0;j<3;j++){
            if (A.getCasilla()[i][j]!=B.getCasilla()[i][j]){
                b=false;//con uno que no sea igual ya todo ese nodo es diferente // retorna false si es diferente
                break; //rompemos el ciclo
            }                
        }            
    }
    return b; // retorna true si es igualk
        
    
}


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
           UIManager.setLookAndFeel(
	    "com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Inter1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Inter1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Inter1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Inter1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Inter1().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField agendaMaxima;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner10;
    private javax.swing.JSpinner jSpinner11;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JSpinner jSpinner3;
    private javax.swing.JSpinner jSpinner4;
    private javax.swing.JSpinner jSpinner5;
    private javax.swing.JSpinner jSpinner6;
    private javax.swing.JSpinner jSpinner7;
    private javax.swing.JSpinner jSpinner8;
    private javax.swing.JSpinner jSpinner9;
    private javax.swing.JTextField nivelSolucion;
    private javax.swing.JTextField nivelesExplorados;
    private javax.swing.JTextField nodosGeneradosText;
    private javax.swing.JTextField tiempoText;
    // End of variables declaration//GEN-END:variables

    

    
}
